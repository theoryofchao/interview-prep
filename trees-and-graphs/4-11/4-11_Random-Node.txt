Random Node: You are implementing a binary tree from scratch which, in addition to insert, find, and delete, has a method getRandomNode() which returns a random node from the tree. All nodes should be equally likely to be chosen. Design and implement an algorithm for getRandomNode, and explain how you would implement the rest of the methods.



Ideas:
Bad idea: assign a integer to each node inserted and track it using a hash table. When you delete it, also remove it from the hash table. When you run getRandomNode(), you find all possible keys inside this hash table, and run get a random one. Then search the entire table for this "randomNode" O(n) runtime.
Better idea (for BST): if it's BST then on insertion we already know the numbers since we can track that and we can easily search for it. It's O(log n) runtime for getRandomNode() since you just have to iterate the depth to find the node you're looking for.
